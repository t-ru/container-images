name: opensuse-tumbleweed-rmt-server

on:

  workflow_dispatch:
  
  #schedule:
  #  - cron: '0 0 * * *'  # every day at midnight

env:
  BASE_IMAGE_NAME: "registry.opensuse.org/opensuse/tumbleweed"
  BASE_IMAGE_TAG: "latest"
  TARGET_IMAGE_NAME: "opensuse-tumbleweed-rmt-server-testing"
  WORK_CONTAINER: "work-container"
  
jobs:

  build:
    runs-on: ubuntu-latest

    steps:

      - name: Show variables
        run: |
          echo "Base image name: ${{ env.BASE_IMAGE_NAME }}"
          echo "Base image tag: ${{ env.BASE_IMAGE_TAG }}"
          echo "Target image name: ${{ env.TARGET_IMAGE_NAME }}"
      
      # Check out repository
      - uses: actions/checkout@v2
      
      # Pull base image
      - name: Pull base image
        run: buildah pull ${{ env.BASE_IMAGE_NAME }}:${{ env.BASE_IMAGE_TAG }}
      
      # Show images
      - name: Show images
        run: buildah images
        
      # Create work container
      - name: Create work container
        run: buildah from --name "${{ env.WORK_CONTAINER }}" ${{ env.BASE_IMAGE_NAME }}:${{ env.BASE_IMAGE_TAG }}
        
      # Show containers
      - name: Show containers
        run: buildah containers
      
      # Refresh repositories
      - name: Refresh repositories
        run: buildah run ${{ env.WORK_CONTAINER }} zypper refresh
      
      # Install updates
      #   tumbleweed: "zypper dup" not "zypper up"
      - name: Install updates
        run: buildah run ${{ env.WORK_CONTAINER }} zypper dup --no-confirm --no-recommends

      # Install packages (hostname)
      #   prevent installation of busybox and busybox-hostname
      - name: Install packages (hostname)
        run: buildah run ${{ env.WORK_CONTAINER }} zypper install --no-confirm --no-recommends hostname

      # Install packages (util-linux)
      #   prevent installation of busybox and busybox-util-linux
      - name: Install packages (util-linux)
        run: buildah run ${{ env.WORK_CONTAINER }} zypper install --no-confirm --no-recommends util-linux
      
      # Install packages (mariadb)
      - name: Install packages (mariadb)
        run: buildah run ${{ env.WORK_CONTAINER }} zypper install --no-confirm --no-recommends mariadb

      # Install packages (nginx)
      - name: Install packages (nginx)
        run: buildah run ${{ env.WORK_CONTAINER }} zypper install --no-confirm --no-recommends nginx
      
      # Install packages (ruby2.7)
      - name: Install packages (ruby2.7)
        run: buildah run ${{ env.WORK_CONTAINER }} zypper install --no-confirm --no-recommends ruby2.7 ruby2.7-rubygem-gem2rpm ruby2.7-rubygem-bundler

      # Install gems bundler:1.17.3)
      #   rmt-server requires bundler:1.17.3
      #   bundler:1.17.3 will not installed by zypper
      #
      #   c617b9ee75ad:/ # rmt-cli
      #   Traceback (most recent call last):
      #     6: from /usr/bin/rmt-cli:4:in `<main>'
      #     5: from /usr/bin/rmt-cli:4:in `require_relative'
      #     4: from /usr/share/rmt/config/boot.rb:3:in `<top (required)>'
      #     3: from /usr/lib64/ruby/2.7.0/rubygems/core_ext/kernel_require.rb:71:in `require'
      #     2: from /usr/lib64/ruby/2.7.0/rubygems/core_ext/kernel_gem.rb:62:in `gem'
      #     1: from /usr/lib64/ruby/2.7.0/rubygems/dependency.rb:323:in `to_spec'
      #     /usr/lib64/ruby/2.7.0/rubygems/dependency.rb:313:in `to_specs': Could not find 'bundler' (1.17.3) required by your /usr/share/rmt/Gemfile.lock. (Gem::MissingSpecVersionError)
      #   To update to the latest version installed on your system, run `bundle update --bundler`.
      #   To install the missing version, run `gem install bundler:1.17.3`
      #   Checked in 'GEM_PATH=/root/.gem/ruby/2.7.0:/usr/lib64/ruby/gems/2.7.0', execute `gem env` for more information
      #   c617b9ee75ad:/ #
      - name: Install gems (bundler:1.17.3)
        run: buildah run ${{ env.WORK_CONTAINER }} gem install bundler:1.17.3
      
      # Install packages (rmt-server)
      - name: Install packages (rmt-server)
        run: buildah run ${{ env.WORK_CONTAINER }} zypper install --no-confirm --no-recommends rmt-server
      

      # ???
      #   mariadb-tools
      #   pwgen
      #   catatonit

      # Create /container-entrypoint.d
      - name: Create /container-entrypoint.d
        #run: buildah run ${{ env.WORK_CONTAINER }} mkdir /container-entrypoint.d
        run: buildah copy ${{ env.WORK_CONTAINER }} "$GITHUB_WORKSPACE/$GITHUB_WORKFLOW/container-entrypoint.d" "/"

      # Create /container-entrypoint.sh
      - name: Create /container-entrypoint.sh
        run: buildah copy ${{ env.WORK_CONTAINER }} "$GITHUB_WORKSPACE/base/container-entrypoint.sh" "/"
        
      
      





        
      # Remove labels
      - name: Remove labels
        run: buildah config --label - ${{ env.WORK_CONTAINER }}
      
      # Add labels
      - name: Add labels
        run: | 
          buildah config --label org.opencontainers.image.title="openSUSE Tumbleweed RMT Server container" ${{ env.WORK_CONTAINER }}
          buildah config --label org.opencontainers.image.description="bla bla bla" ${{ env.WORK_CONTAINER }}
          buildah config --label org.opencontainers.image.source="https://github.com/t-ru/container-images/tree/master/opensuse-tumbleweed-rmt-server/README.md" ${{ env.WORK_CONTAINER }}
    
      # Create target image
      - name: Create target image
        run: buildah commit --format docker --squash ${{ env.WORK_CONTAINER }} ${{ env.TARGET_IMAGE_NAME }}:${{ github.sha }}
      
      # Show images
      - name: Show images
        run: buildah images
        
      # Create additional tags
      - name: Create additional tags
        run: |
          buildah tag ${{ env.TARGET_IMAGE_NAME }}:${{ github.sha }} ${{ env.TARGET_IMAGE_NAME }}:${{ github.run_number }}  
          buildah tag ${{ env.TARGET_IMAGE_NAME }}:${{ github.sha }} ${{ env.TARGET_IMAGE_NAME }}:latest
      
      # Show images
      - name: Show images
        run: buildah images
      
      - name: Push to ghcr.io
        id: push-to-ghcr
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.TARGET_IMAGE_NAME }}
          tags: latest ${{ github.run_number }} ${{ github.sha }}
          registry: ghcr.io/${{ github.repository_owner }}/container-images
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
          #registry: ghcr.io/${{ github.repository_owner }}/container-images
          
    
      
      
      
      
      
      
      


        
      
        
